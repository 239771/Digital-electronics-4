
GreenHouseProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  0000092e  000009c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000092e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  0080014c  0080014c  00000a0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d75  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c6b  00000000  00000000  00002995  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f25  00000000  00000000  00003600  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f4  00000000  00000000  00004528  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000732  00000000  00000000  0000491c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e98  00000000  00000000  0000504e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00005ee6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_13>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__vector_18>
  4c:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__vector_19>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 0b 03 	jmp	0x616	; 0x616 <__vector_21>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	06 02       	muls	r16, r22
  6a:	0a 02       	muls	r16, r26
  6c:	17 02       	muls	r17, r23
  6e:	5d 02       	muls	r21, r29
  70:	6a 02       	muls	r22, r26
  72:	c1 02       	muls	r28, r17
  74:	af 02       	muls	r26, r31

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	ee e2       	ldi	r30, 0x2E	; 46
  8a:	f9 e0       	ldi	r31, 0x09	; 9
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	ac 34       	cpi	r26, 0x4C	; 76
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	ac e4       	ldi	r26, 0x4C	; 76
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 39       	cpi	r26, 0x92	; 146
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <main>
  ac:	0c 94 95 04 	jmp	0x92a	; 0x92a <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  b4:	fc 01       	movw	r30, r24
  b6:	40 81       	ld	r20, Z
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <GPIO_config_output+0xe>
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <GPIO_config_output+0xa>
  c6:	24 2b       	or	r18, r20
  c8:	20 83       	st	Z, r18
  ca:	08 95       	ret

000000cc <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  cc:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  ce:	90 81       	ld	r25, Z
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <GPIO_write_low+0xe>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <GPIO_write_low+0xa>
  de:	20 95       	com	r18
  e0:	29 23       	and	r18, r25
  e2:	20 83       	st	Z, r18
  e4:	08 95       	ret

000000e6 <GPIO_write_high>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name|(1<<pin_num);
  e6:	fc 01       	movw	r30, r24
  e8:	40 81       	ld	r20, Z
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <GPIO_write_high+0xe>
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <GPIO_write_high+0xa>
  f8:	24 2b       	or	r18, r20
  fa:	20 83       	st	Z, r18
  fc:	08 95       	ret

000000fe <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	82 60       	ori	r24, 0x02	; 2
 102:	85 b9       	out	0x05, r24	; 5
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	8a 95       	dec	r24
 108:	f1 f7       	brne	.-4      	; 0x106 <toggle_e+0x8>
 10a:	00 00       	nop
 10c:	85 b1       	in	r24, 0x05	; 5
 10e:	8d 7f       	andi	r24, 0xFD	; 253
 110:	85 b9       	out	0x05, r24	; 5
 112:	08 95       	ret

00000114 <lcd_write>:
 114:	cf 93       	push	r28
 116:	c8 2f       	mov	r28, r24
 118:	66 23       	and	r22, r22
 11a:	21 f0       	breq	.+8      	; 0x124 <lcd_write+0x10>
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	85 b9       	out	0x05, r24	; 5
 122:	03 c0       	rjmp	.+6      	; 0x12a <lcd_write+0x16>
 124:	85 b1       	in	r24, 0x05	; 5
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	85 b9       	out	0x05, r24	; 5
 12a:	8a b1       	in	r24, 0x0a	; 10
 12c:	80 61       	ori	r24, 0x10	; 16
 12e:	8a b9       	out	0x0a, r24	; 10
 130:	8a b1       	in	r24, 0x0a	; 10
 132:	80 62       	ori	r24, 0x20	; 32
 134:	8a b9       	out	0x0a, r24	; 10
 136:	8a b1       	in	r24, 0x0a	; 10
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	8a b9       	out	0x0a, r24	; 10
 13c:	8a b1       	in	r24, 0x0a	; 10
 13e:	80 68       	ori	r24, 0x80	; 128
 140:	8a b9       	out	0x0a, r24	; 10
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	8f 77       	andi	r24, 0x7F	; 127
 146:	8b b9       	out	0x0b, r24	; 11
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	8f 7b       	andi	r24, 0xBF	; 191
 14c:	8b b9       	out	0x0b, r24	; 11
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	8f 7d       	andi	r24, 0xDF	; 223
 152:	8b b9       	out	0x0b, r24	; 11
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	8f 7e       	andi	r24, 0xEF	; 239
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	cc 23       	and	r28, r28
 15c:	1c f4       	brge	.+6      	; 0x164 <lcd_write+0x50>
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	80 68       	ori	r24, 0x80	; 128
 162:	8b b9       	out	0x0b, r24	; 11
 164:	c6 ff       	sbrs	r28, 6
 166:	03 c0       	rjmp	.+6      	; 0x16e <lcd_write+0x5a>
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	c5 ff       	sbrs	r28, 5
 170:	03 c0       	rjmp	.+6      	; 0x178 <lcd_write+0x64>
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	80 62       	ori	r24, 0x20	; 32
 176:	8b b9       	out	0x0b, r24	; 11
 178:	c4 ff       	sbrs	r28, 4
 17a:	03 c0       	rjmp	.+6      	; 0x182 <lcd_write+0x6e>
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	80 61       	ori	r24, 0x10	; 16
 180:	8b b9       	out	0x0b, r24	; 11
 182:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle_e>
 186:	8b b1       	in	r24, 0x0b	; 11
 188:	8f 77       	andi	r24, 0x7F	; 127
 18a:	8b b9       	out	0x0b, r24	; 11
 18c:	8b b1       	in	r24, 0x0b	; 11
 18e:	8f 7b       	andi	r24, 0xBF	; 191
 190:	8b b9       	out	0x0b, r24	; 11
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	8f 7d       	andi	r24, 0xDF	; 223
 196:	8b b9       	out	0x0b, r24	; 11
 198:	8b b1       	in	r24, 0x0b	; 11
 19a:	8f 7e       	andi	r24, 0xEF	; 239
 19c:	8b b9       	out	0x0b, r24	; 11
 19e:	c3 ff       	sbrs	r28, 3
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <lcd_write+0x94>
 1a2:	8b b1       	in	r24, 0x0b	; 11
 1a4:	80 68       	ori	r24, 0x80	; 128
 1a6:	8b b9       	out	0x0b, r24	; 11
 1a8:	c2 ff       	sbrs	r28, 2
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <lcd_write+0x9e>
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	80 64       	ori	r24, 0x40	; 64
 1b0:	8b b9       	out	0x0b, r24	; 11
 1b2:	c1 ff       	sbrs	r28, 1
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <lcd_write+0xa8>
 1b6:	8b b1       	in	r24, 0x0b	; 11
 1b8:	80 62       	ori	r24, 0x20	; 32
 1ba:	8b b9       	out	0x0b, r24	; 11
 1bc:	c0 ff       	sbrs	r28, 0
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <lcd_write+0xb2>
 1c0:	8b b1       	in	r24, 0x0b	; 11
 1c2:	80 61       	ori	r24, 0x10	; 16
 1c4:	8b b9       	out	0x0b, r24	; 11
 1c6:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle_e>
 1ca:	8b b1       	in	r24, 0x0b	; 11
 1cc:	80 61       	ori	r24, 0x10	; 16
 1ce:	8b b9       	out	0x0b, r24	; 11
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	80 62       	ori	r24, 0x20	; 32
 1d4:	8b b9       	out	0x0b, r24	; 11
 1d6:	8b b1       	in	r24, 0x0b	; 11
 1d8:	80 64       	ori	r24, 0x40	; 64
 1da:	8b b9       	out	0x0b, r24	; 11
 1dc:	8b b1       	in	r24, 0x0b	; 11
 1de:	80 68       	ori	r24, 0x80	; 128
 1e0:	8b b9       	out	0x0b, r24	; 11
 1e2:	87 eb       	ldi	r24, 0xB7	; 183
 1e4:	9b e0       	ldi	r25, 0x0B	; 11
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_write+0xd2>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <lcd_write+0xd8>
 1ec:	00 00       	nop
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <lcd_command>:
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_write>
 1f8:	08 95       	ret

000001fa <lcd_gotoxy>:
 1fa:	61 11       	cpse	r22, r1
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <lcd_gotoxy+0xc>
 1fe:	80 58       	subi	r24, 0x80	; 128
 200:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_command>
 204:	08 95       	ret
 206:	80 54       	subi	r24, 0x40	; 64
 208:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_command>
 20c:	08 95       	ret

0000020e <lcd_clrscr>:
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_command>
 214:	08 95       	ret

00000216 <lcd_putc>:
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_write>
 21c:	08 95       	ret

0000021e <lcd_puts>:
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	fc 01       	movw	r30, r24
 224:	03 c0       	rjmp	.+6      	; 0x22c <lcd_puts+0xe>
 226:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_putc>
 22a:	fe 01       	movw	r30, r28
 22c:	ef 01       	movw	r28, r30
 22e:	21 96       	adiw	r28, 0x01	; 1
 230:	80 81       	ld	r24, Z
 232:	81 11       	cpse	r24, r1
 234:	f8 cf       	rjmp	.-16     	; 0x226 <lcd_puts+0x8>
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 23c:	cf 93       	push	r28
 23e:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 240:	84 b1       	in	r24, 0x04	; 4
 242:	81 60       	ori	r24, 0x01	; 1
 244:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 246:	8a b1       	in	r24, 0x0a	; 10
 248:	80 62       	ori	r24, 0x20	; 32
 24a:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 24c:	84 b1       	in	r24, 0x04	; 4
 24e:	82 60       	ori	r24, 0x02	; 2
 250:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 252:	8a b1       	in	r24, 0x0a	; 10
 254:	80 61       	ori	r24, 0x10	; 16
 256:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 258:	8a b1       	in	r24, 0x0a	; 10
 25a:	80 62       	ori	r24, 0x20	; 32
 25c:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 25e:	8a b1       	in	r24, 0x0a	; 10
 260:	80 64       	ori	r24, 0x40	; 64
 262:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 264:	8a b1       	in	r24, 0x0a	; 10
 266:	80 68       	ori	r24, 0x80	; 128
 268:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	99 ef       	ldi	r25, 0xF9	; 249
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <lcd_init+0x32>
 272:	00 c0       	rjmp	.+0      	; 0x274 <lcd_init+0x38>
 274:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 276:	8b b1       	in	r24, 0x0b	; 11
 278:	80 62       	ori	r24, 0x20	; 32
 27a:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 27c:	8b b1       	in	r24, 0x0b	; 11
 27e:	80 61       	ori	r24, 0x10	; 16
 280:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 282:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle_e>
 286:	8f e1       	ldi	r24, 0x1F	; 31
 288:	9e e4       	ldi	r25, 0x4E	; 78
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_init+0x4e>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <lcd_init+0x54>
 290:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 292:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle_e>
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <lcd_init+0x5e>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <lcd_init+0x64>
 2a0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 2a2:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle_e>
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <lcd_init+0x6e>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <lcd_init+0x74>
 2b0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 2b2:	8b b1       	in	r24, 0x0b	; 11
 2b4:	8f 7e       	andi	r24, 0xEF	; 239
 2b6:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 2b8:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle_e>
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <lcd_init+0x84>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <lcd_init+0x8a>
 2c6:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 2c8:	88 e2       	ldi	r24, 0x28	; 40
 2ca:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 2ce:	88 e0       	ldi	r24, 0x08	; 8
 2d0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 2d4:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 2d8:	86 e0       	ldi	r24, 0x06	; 6
 2da:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 2de:	8c 2f       	mov	r24, r28
 2e0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_command>
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
	 //Configure LEDS as output and initialize with low value.
	 GPIO_config_output(&DDRB, LED_WINDOW);
 2e8:	65 e0       	ldi	r22, 0x05	; 5
 2ea:	84 e2       	ldi	r24, 0x24	; 36
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 5a 00 	call	0xb4	; 0xb4 <GPIO_config_output>
	 GPIO_write_low(&PORTB, LED_WINDOW);
 2f2:	65 e0       	ldi	r22, 0x05	; 5
 2f4:	85 e2       	ldi	r24, 0x25	; 37
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
	 GPIO_config_output(&DDRB, LED_PUMP);
 2fc:	64 e0       	ldi	r22, 0x04	; 4
 2fe:	84 e2       	ldi	r24, 0x24	; 36
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 5a 00 	call	0xb4	; 0xb4 <GPIO_config_output>
	 GPIO_write_low(&PORTB, LED_PUMP);
 306:	64 e0       	ldi	r22, 0x04	; 4
 308:	85 e2       	ldi	r24, 0x25	; 37
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
	 GPIO_config_output(&DDRB, LED_FAN);
 310:	63 e0       	ldi	r22, 0x03	; 3
 312:	84 e2       	ldi	r24, 0x24	; 36
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 5a 00 	call	0xb4	; 0xb4 <GPIO_config_output>
	 GPIO_write_low(&PORTB, LED_FAN);
 31a:	63 e0       	ldi	r22, 0x03	; 3
 31c:	85 e2       	ldi	r24, 0x25	; 37
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
	 GPIO_config_output(&DDRB, LED_LIGHT);
 324:	62 e0       	ldi	r22, 0x02	; 2
 326:	84 e2       	ldi	r24, 0x24	; 36
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 5a 00 	call	0xb4	; 0xb4 <GPIO_config_output>
	 GPIO_write_low(&PORTB, LED_LIGHT);
 32e:	62 e0       	ldi	r22, 0x02	; 2
 330:	85 e2       	ldi	r24, 0x25	; 37
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
	
	 //Configure ADC to convert PC0[A0] analog value
	 //Set ADC reference to AVcc
	 ADMUX |=(1<<REFS0);
 338:	ec e7       	ldi	r30, 0x7C	; 124
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	80 64       	ori	r24, 0x40	; 64
 340:	80 83       	st	Z, r24
	 
	 // Set input channel to ADC0
	 ADMUX &= ~((1<MUX3) | (1<<MUX2)|| (1<<MUX1)| (1<<MUX0) );
 342:	80 81       	ld	r24, Z
 344:	8e 7f       	andi	r24, 0xFE	; 254
 346:	80 83       	st	Z, r24

	 // Enable ADC module
	 ADCSRA |= (1<<ADEN);
 348:	ea e7       	ldi	r30, 0x7A	; 122
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	80 68       	ori	r24, 0x80	; 128
 350:	80 83       	st	Z, r24

	 // Enable conversion complete interrupt
	 ADCSRA |= (1<<ADIE);
 352:	80 81       	ld	r24, Z
 354:	88 60       	ori	r24, 0x08	; 8
 356:	80 83       	st	Z, r24
	 
	 // Set clock prescaler to 128
	 
	 ADCSRA |= (1<<ADPS2) | (1<<ADPS1) |(1<<ADPS0) ;
 358:	80 81       	ld	r24, Z
 35a:	87 60       	ori	r24, 0x07	; 7
 35c:	80 83       	st	Z, r24
	  
	//Initialize LCD display 
	lcd_init(LCD_DISP_ON);
 35e:	8c e0       	ldi	r24, 0x0C	; 12
 360:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_init>
	lcd_clrscr();
 364:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clrscr>
	
    // Initialize I2C (TWI)
    twi_init();
 368:	0e 94 72 03 	call	0x6e4	; 0x6e4 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 36c:	87 e6       	ldi	r24, 0x67	; 103
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 0e 04 	call	0x81c	; 0x81c <uart_init>
	
	// Put strings to ringbuffer for transmitting via UART
	uart_puts("\r\nStarting service...\r\n");
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	0e 94 3e 04 	call	0x87c	; 0x87c <uart_puts>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Enable interrupt and set the overflow prescaler to 262ms
    TIM1_overflow_262ms();
 37c:	e1 e8       	ldi	r30, 0x81	; 129
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	8b 7f       	andi	r24, 0xFB	; 251
 384:	80 83       	st	Z, r24
 386:	80 81       	ld	r24, Z
 388:	83 60       	ori	r24, 0x03	; 3
 38a:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 38c:	ef e6       	ldi	r30, 0x6F	; 111
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	81 60       	ori	r24, 0x01	; 1
 394:	80 83       	st	Z, r24
    
	// Enables interrupts by setting the global interrupt mask
    sei();
 396:	78 94       	sei
 398:	ff cf       	rjmp	.-2      	; 0x398 <main+0xb0>

0000039a <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and take the info through different 
 * I2C sensors and display it via UART or LCD screen.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{	 
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	1f 93       	push	r17
 3a6:	2f 93       	push	r18
 3a8:	3f 93       	push	r19
 3aa:	4f 93       	push	r20
 3ac:	5f 93       	push	r21
 3ae:	6f 93       	push	r22
 3b0:	7f 93       	push	r23
 3b2:	8f 93       	push	r24
 3b4:	9f 93       	push	r25
 3b6:	af 93       	push	r26
 3b8:	bf 93       	push	r27
 3ba:	ef 93       	push	r30
 3bc:	ff 93       	push	r31
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	28 97       	sbiw	r28, 0x08	; 8
 3c8:	de bf       	out	0x3e, r29	; 62
 3ca:	cd bf       	out	0x3d, r28	; 61
	//Variable declaration
	 static state_t state = STATE_IDLE;		 // Current state
	 static uint8_t temphumid_addr = 0x5c;   // I2C slave address for measuring temperature and humidity
	 static uint8_t light_addr=0x23;		 // I2C slave address for measuring light
	 static uint8_t soil_addr=0x20;			 // I2C slave address for measuring soil 
	 char uart_string[8] = "00";			 // String for converting numbers by itoa()
 3cc:	80 e3       	ldi	r24, 0x30	; 48
 3ce:	90 e3       	ldi	r25, 0x30	; 48
 3d0:	9a 83       	std	Y+2, r25	; 0x02
 3d2:	89 83       	std	Y+1, r24	; 0x01
 3d4:	1c 82       	std	Y+4, r1	; 0x04
 3d6:	1b 82       	std	Y+3, r1	; 0x03
 3d8:	fe 01       	movw	r30, r28
 3da:	35 96       	adiw	r30, 0x05	; 5
 3dc:	84 e0       	ldi	r24, 0x04	; 4
 3de:	df 01       	movw	r26, r30
 3e0:	1d 92       	st	X+, r1
 3e2:	8a 95       	dec	r24
 3e4:	e9 f7       	brne	.-6      	; 0x3e0 <__vector_13+0x46>
	 uint8_t result=1;						 //Temperature variable
	 static uint8_t counter = 0x00;			 //Counter for moving through I2C RAM registers
	 
	 // Start ADC conversion
	 ADCSRA |= (1<<ADSC);
 3e6:	ea e7       	ldi	r30, 0x7A	; 122
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	80 64       	ori	r24, 0x40	; 64
 3ee:	80 83       	st	Z, r24
	
//SENSORS ---------------------
    // FSM
    switch (state)
 3f0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3f4:	8e 2f       	mov	r24, r30
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	fc 01       	movw	r30, r24
 3fa:	31 97       	sbiw	r30, 0x01	; 1
 3fc:	e7 30       	cpi	r30, 0x07	; 7
 3fe:	f1 05       	cpc	r31, r1
 400:	08 f0       	brcs	.+2      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 402:	ec c0       	rjmp	.+472    	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
 404:	ec 5c       	subi	r30, 0xCC	; 204
 406:	ff 4f       	sbci	r31, 0xFF	; 255
 408:	0c 94 4b 04 	jmp	0x896	; 0x896 <__tablejump2__>
    {
		
	case STATE_IDLE:
	
		state=STATE_SEND1;   
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

    break;
 412:	e7 c0       	rjmp	.+462    	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
      
    case STATE_SEND1:
	
       //Starts i2c with 1st addr-->wanting to write
       twi_start((temphumid_addr<<1) + TWI_WRITE);
 414:	88 eb       	ldi	r24, 0xB8	; 184
 416:	0e 94 81 03 	call	0x702	; 0x702 <twi_start>
       //Writing 0x0 to the sensor with addr
       twi_write(counter);
 41a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 41e:	0e 94 9e 03 	call	0x73c	; 0x73c <twi_write>
       //Nothing else has to be sent
       twi_stop();   
 422:	0e 94 b2 03 	call	0x764	; 0x764 <twi_stop>
	   state=STATE_REC1; 
 426:	83 e0       	ldi	r24, 0x03	; 3
 428:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	  
	break;
 42c:	da c0       	rjmp	.+436    	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
        
    case STATE_REC1:
      
	  //After giving the order to the slave we want to read
      twi_start((temphumid_addr<<1) + TWI_READ);
 42e:	89 eb       	ldi	r24, 0xB9	; 185
 430:	0e 94 81 03 	call	0x702	; 0x702 <twi_start>
      //Read the temperature integer part
      result=twi_read_nack();
 434:	0e 94 a8 03 	call	0x750	; 0x750 <twi_read_nack>
 438:	18 2f       	mov	r17, r24
	  //End communication
	  twi_stop();
 43a:	0e 94 b2 03 	call	0x764	; 0x764 <twi_stop>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 43e:	4a e0       	ldi	r20, 0x0A	; 10
 440:	be 01       	movw	r22, r28
 442:	6f 5f       	subi	r22, 0xFF	; 255
 444:	7f 4f       	sbci	r23, 0xFF	; 255
 446:	81 2f       	mov	r24, r17
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__itoa_ncheck>
	  
	  //Integer to ASCII for displaying in UART and LCD
      itoa(result,uart_string,10);
      //Display in UART	  
	  uart_puts("TEMPERATURE:");
 44e:	89 e1       	ldi	r24, 0x19	; 25
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 3e 04 	call	0x87c	; 0x87c <uart_puts>
      uart_puts(uart_string);
 456:	ce 01       	movw	r24, r28
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	0e 94 3e 04 	call	0x87c	; 0x87c <uart_puts>
	  uart_puts("\n");
 45e:	87 e1       	ldi	r24, 0x17	; 23
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	0e 94 3e 04 	call	0x87c	; 0x87c <uart_puts>
	  
      //Display in LCD
 	  lcd_gotoxy(0,0);
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_gotoxy>
      lcd_puts("Temp:");
 46e:	86 e2       	ldi	r24, 0x26	; 38
 470:	91 e0       	ldi	r25, 0x01	; 1
 472:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_puts>
	  lcd_gotoxy(5,0);
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	85 e0       	ldi	r24, 0x05	; 5
 47a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_gotoxy>
	  lcd_puts(uart_string);
 47e:	ce 01       	movw	r24, r28
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_puts>
	  lcd_gotoxy(7,0);
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	87 e0       	ldi	r24, 0x07	; 7
 48a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_gotoxy>
	  lcd_puts("C");
 48e:	8c e2       	ldi	r24, 0x2C	; 44
 490:	91 e0       	ldi	r25, 0x01	; 1
 492:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_puts>
		
	  //Condition for turning on LED_WINDOW (open/close window in real life)	
	  if((int)result>20){
 496:	15 31       	cpi	r17, 0x15	; 21
 498:	28 f0       	brcs	.+10     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
		  GPIO_write_high(&PORTB, LED_WINDOW);
 49a:	65 e0       	ldi	r22, 0x05	; 5
 49c:	85 e2       	ldi	r24, 0x25	; 37
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 73 00 	call	0xe6	; 0xe6 <GPIO_write_high>
	  }
		
	  if((int)result<=20){
 4a4:	15 31       	cpi	r17, 0x15	; 21
 4a6:	28 f4       	brcc	.+10     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
		  GPIO_write_low(&PORTB, LED_WINDOW);
 4a8:	65 e0       	ldi	r22, 0x05	; 5
 4aa:	85 e2       	ldi	r24, 0x25	; 37
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
	  }	
	  
	  //Next state		
      state = STATE_SEND2;
 4b2:	84 e0       	ldi	r24, 0x04	; 4
 4b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
    break;
 4b8:	94 c0       	rjmp	.+296    	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
	
	case STATE_SEND2:
		
	  //Starts i2c with 1st addr-->wanting to write
	  twi_start((light_addr<<1) + TWI_WRITE);
 4ba:	86 e4       	ldi	r24, 0x46	; 70
 4bc:	0e 94 81 03 	call	0x702	; 0x702 <twi_start>
	  //Writing 0x0 to the sensor with addr
	  twi_write(counter);
 4c0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 4c4:	0e 94 9e 03 	call	0x73c	; 0x73c <twi_write>
	  //Nothing else has to be sent
	  twi_stop();
 4c8:	0e 94 b2 03 	call	0x764	; 0x764 <twi_stop>
	 
	  //Next state	
	  state=STATE_REC2;
 4cc:	85 e0       	ldi	r24, 0x05	; 5
 4ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	  
	break;
 4d2:	87 c0       	rjmp	.+270    	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
		
	case STATE_REC2:
	   //After giving the	order to the slave we want to read
	   twi_start((light_addr<<1) + TWI_READ);
 4d4:	87 e4       	ldi	r24, 0x47	; 71
 4d6:	0e 94 81 03 	call	0x702	; 0x702 <twi_start>
	   //Read the temperature integer part
	   result=twi_read_nack();
 4da:	0e 94 a8 03 	call	0x750	; 0x750 <twi_read_nack>
 4de:	18 2f       	mov	r17, r24
 4e0:	4a e0       	ldi	r20, 0x0A	; 10
 4e2:	be 01       	movw	r22, r28
 4e4:	6f 5f       	subi	r22, 0xFF	; 255
 4e6:	7f 4f       	sbci	r23, 0xFF	; 255
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__itoa_ncheck>
	   itoa(result,uart_string,10);
	   twi_stop();
 4ee:	0e 94 b2 03 	call	0x764	; 0x764 <twi_stop>
	   
	   //Display in UART	
	   uart_puts("HUMID:");
 4f2:	8e e2       	ldi	r24, 0x2E	; 46
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	0e 94 3e 04 	call	0x87c	; 0x87c <uart_puts>
	   uart_puts(uart_string);  
 4fa:	ce 01       	movw	r24, r28
 4fc:	01 96       	adiw	r24, 0x01	; 1
 4fe:	0e 94 3e 04 	call	0x87c	; 0x87c <uart_puts>
	   uart_puts("\n");
 502:	87 e1       	ldi	r24, 0x17	; 23
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	0e 94 3e 04 	call	0x87c	; 0x87c <uart_puts>
	   
	   //Display in LCD
	   lcd_gotoxy(0,1);
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_gotoxy>
	   lcd_puts("Humid:"); 
 512:	85 e3       	ldi	r24, 0x35	; 53
 514:	91 e0       	ldi	r25, 0x01	; 1
 516:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_puts>
	   lcd_gotoxy(6,1);
 51a:	61 e0       	ldi	r22, 0x01	; 1
 51c:	86 e0       	ldi	r24, 0x06	; 6
 51e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_gotoxy>
	   lcd_puts(uart_string);
 522:	ce 01       	movw	r24, r28
 524:	01 96       	adiw	r24, 0x01	; 1
 526:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_puts>
	   lcd_gotoxy(8,1);
 52a:	61 e0       	ldi	r22, 0x01	; 1
 52c:	88 e0       	ldi	r24, 0x08	; 8
 52e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_gotoxy>
	   lcd_puts("%");
 532:	8c e3       	ldi	r24, 0x3C	; 60
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_puts>
	   
	   //Condition for turning on LED_FANS (turn on/off fans in real life)
	   if((int)result>20){
 53a:	15 31       	cpi	r17, 0x15	; 21
 53c:	28 f0       	brcs	.+10     	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
		 GPIO_write_high(&PORTB, LED_FAN);
 53e:	63 e0       	ldi	r22, 0x03	; 3
 540:	85 e2       	ldi	r24, 0x25	; 37
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 73 00 	call	0xe6	; 0xe6 <GPIO_write_high>
	   }
	 
	   if((int)result<=20){
 548:	15 31       	cpi	r17, 0x15	; 21
 54a:	28 f4       	brcc	.+10     	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
		 GPIO_write_low(&PORTB, LED_FAN);
 54c:	63 e0       	ldi	r22, 0x03	; 3
 54e:	85 e2       	ldi	r24, 0x25	; 37
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
	   }
		 
	 state = STATE_SEND3;
 556:	87 e0       	ldi	r24, 0x07	; 7
 558:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	 break;
 55c:	42 c0       	rjmp	.+132    	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
	 
	 case STATE_SEND3:
	   //Starts i2c with 1st addr-->wanting to write
	   twi_start((soil_addr<<1) + TWI_WRITE);
 55e:	80 e4       	ldi	r24, 0x40	; 64
 560:	0e 94 81 03 	call	0x702	; 0x702 <twi_start>
	   //Writing 0x0 to the sensor with addr
	   twi_write(counter);
 564:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 568:	0e 94 9e 03 	call	0x73c	; 0x73c <twi_write>
	   //Nothing else has to be sent
	   twi_stop();
 56c:	0e 94 b2 03 	call	0x764	; 0x764 <twi_stop>
	   //Increase the counter for moving through RAM memories
	   counter=counter+(uint8_t)1;
 570:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 574:	8f 5f       	subi	r24, 0xFF	; 255
 576:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
	 
	   state=STATE_REC3;
 57a:	86 e0       	ldi	r24, 0x06	; 6
 57c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	 
	 break;
 580:	30 c0       	rjmp	.+96     	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
	 
	 case STATE_REC3:
	 
	   //After giving the order to the slave we want to read
	   twi_start((soil_addr<<1) + TWI_READ);
 582:	81 e4       	ldi	r24, 0x41	; 65
 584:	0e 94 81 03 	call	0x702	; 0x702 <twi_start>
	   //Read the temperature integer part
	   result=twi_read_nack();
 588:	0e 94 a8 03 	call	0x750	; 0x750 <twi_read_nack>
 58c:	18 2f       	mov	r17, r24
 58e:	4a e0       	ldi	r20, 0x0A	; 10
 590:	be 01       	movw	r22, r28
 592:	6f 5f       	subi	r22, 0xFF	; 255
 594:	7f 4f       	sbci	r23, 0xFF	; 255
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__itoa_ncheck>
	   itoa(result,uart_string,10);
	   twi_stop();
 59c:	0e 94 b2 03 	call	0x764	; 0x764 <twi_stop>
	   
	   //Display in UART
	   uart_puts("SOIL:");
 5a0:	8e e3       	ldi	r24, 0x3E	; 62
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	0e 94 3e 04 	call	0x87c	; 0x87c <uart_puts>
	   uart_puts(uart_string);
 5a8:	ce 01       	movw	r24, r28
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	0e 94 3e 04 	call	0x87c	; 0x87c <uart_puts>
	   uart_puts("\n");
 5b0:	87 e1       	ldi	r24, 0x17	; 23
 5b2:	91 e0       	ldi	r25, 0x01	; 1
 5b4:	0e 94 3e 04 	call	0x87c	; 0x87c <uart_puts>
	   
	   //Condition for turning on LED_PUMP (turn on/off water pump in real life) 
	   if((int)result>20){
 5b8:	15 31       	cpi	r17, 0x15	; 21
 5ba:	28 f0       	brcs	.+10     	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
		   GPIO_write_high(&PORTB, LED_PUMP);
 5bc:	64 e0       	ldi	r22, 0x04	; 4
 5be:	85 e2       	ldi	r24, 0x25	; 37
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 73 00 	call	0xe6	; 0xe6 <GPIO_write_high>
	   }
	 
	   if((int)result<=20){
 5c6:	15 31       	cpi	r17, 0x15	; 21
 5c8:	28 f4       	brcc	.+10     	; 0x5d4 <__EEPROM_REGION_LENGTH__+0x1d4>
		   GPIO_write_low(&PORTB, LED_PUMP);
 5ca:	64 e0       	ldi	r22, 0x04	; 4
 5cc:	85 e2       	ldi	r24, 0x25	; 37
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
	   }
	
	   state = STATE_IDLE;
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	 break;
 5da:	03 c0       	rjmp	.+6      	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
	 
	 //If something unexpected happens then move to IDLE
     default:
	 
        state = STATE_IDLE;
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
     break;
    }

}
 5e2:	28 96       	adiw	r28, 0x08	; 8
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	f8 94       	cli
 5e8:	de bf       	out	0x3e, r29	; 62
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	cd bf       	out	0x3d, r28	; 61
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	ff 91       	pop	r31
 5f4:	ef 91       	pop	r30
 5f6:	bf 91       	pop	r27
 5f8:	af 91       	pop	r26
 5fa:	9f 91       	pop	r25
 5fc:	8f 91       	pop	r24
 5fe:	7f 91       	pop	r23
 600:	6f 91       	pop	r22
 602:	5f 91       	pop	r21
 604:	4f 91       	pop	r20
 606:	3f 91       	pop	r19
 608:	2f 91       	pop	r18
 60a:	1f 91       	pop	r17
 60c:	0f 90       	pop	r0
 60e:	0f be       	out	0x3f, r0	; 63
 610:	0f 90       	pop	r0
 612:	1f 90       	pop	r1
 614:	18 95       	reti

00000616 <__vector_21>:
		
/**********************************************************************
 * Function: ADC complete interrupt
 * Purpose:  Display value on LCD and send it to UART. Decide if turn on/off windows
 **********************************************************************/	
ISR(ADC_vect){
 616:	1f 92       	push	r1
 618:	0f 92       	push	r0
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	0f 92       	push	r0
 61e:	11 24       	eor	r1, r1
 620:	0f 93       	push	r16
 622:	1f 93       	push	r17
 624:	2f 93       	push	r18
 626:	3f 93       	push	r19
 628:	4f 93       	push	r20
 62a:	5f 93       	push	r21
 62c:	6f 93       	push	r22
 62e:	7f 93       	push	r23
 630:	8f 93       	push	r24
 632:	9f 93       	push	r25
 634:	af 93       	push	r26
 636:	bf 93       	push	r27
 638:	ef 93       	push	r30
 63a:	ff 93       	push	r31
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	00 d0       	rcall	.+0      	; 0x642 <__vector_21+0x2c>
 642:	00 d0       	rcall	.+0      	; 0x644 <__vector_21+0x2e>
 644:	cd b7       	in	r28, 0x3d	; 61
 646:	de b7       	in	r29, 0x3e	; 62
	
		//Variable declaration
		char lcd_string[4] = "0000";
 648:	80 e3       	ldi	r24, 0x30	; 48
 64a:	90 e3       	ldi	r25, 0x30	; 48
 64c:	9a 83       	std	Y+2, r25	; 0x02
 64e:	89 83       	std	Y+1, r24	; 0x01
 650:	9c 83       	std	Y+4, r25	; 0x04
 652:	8b 83       	std	Y+3, r24	; 0x03
		uint16_t value = 0;	
		uint16_t real_value = 0;
		
		//Receive the digital value from the AD converter		
		value=ADC;
 654:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 658:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		
		//Calculate the real value (we want a number between 0 and 5 to measure light)
		real_value=value/204;
 65c:	a1 ea       	ldi	r26, 0xA1	; 161
 65e:	b0 ea       	ldi	r27, 0xA0	; 160
 660:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__umulhisi3>
 664:	8c 01       	movw	r16, r24
 666:	00 0f       	add	r16, r16
 668:	01 2f       	mov	r16, r17
 66a:	00 1f       	adc	r16, r16
 66c:	11 0b       	sbc	r17, r17
 66e:	11 95       	neg	r17
 670:	4a e0       	ldi	r20, 0x0A	; 10
 672:	be 01       	movw	r22, r28
 674:	6f 5f       	subi	r22, 0xFF	; 255
 676:	7f 4f       	sbci	r23, 0xFF	; 255
 678:	c8 01       	movw	r24, r16
 67a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__itoa_ncheck>
		
		//Integer to ASCII for sending to UART
		itoa(real_value,lcd_string,10);
		//Display in UART
		uart_puts("LIGHT:");
 67e:	84 e4       	ldi	r24, 0x44	; 68
 680:	91 e0       	ldi	r25, 0x01	; 1
 682:	0e 94 3e 04 	call	0x87c	; 0x87c <uart_puts>
		uart_puts(lcd_string);
 686:	ce 01       	movw	r24, r28
 688:	01 96       	adiw	r24, 0x01	; 1
 68a:	0e 94 3e 04 	call	0x87c	; 0x87c <uart_puts>
		uart_puts("\n");
 68e:	87 e1       	ldi	r24, 0x17	; 23
 690:	91 e0       	ldi	r25, 0x01	; 1
 692:	0e 94 3e 04 	call	0x87c	; 0x87c <uart_puts>
		
		//Condition for turning on	LED_LIGHT (turn on/off lightbulbs in real life)
		if(real_value<2){
 696:	02 30       	cpi	r16, 0x02	; 2
 698:	11 05       	cpc	r17, r1
 69a:	30 f4       	brcc	.+12     	; 0x6a8 <__vector_21+0x92>
			GPIO_write_high(&PORTB, LED_LIGHT);
 69c:	62 e0       	ldi	r22, 0x02	; 2
 69e:	85 e2       	ldi	r24, 0x25	; 37
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 73 00 	call	0xe6	; 0xe6 <GPIO_write_high>
 6a6:	05 c0       	rjmp	.+10     	; 0x6b2 <__vector_21+0x9c>
		}
		else{
			GPIO_write_low(&PORTB, LED_LIGHT);
 6a8:	62 e0       	ldi	r22, 0x02	; 2
 6aa:	85 e2       	ldi	r24, 0x25	; 37
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
		}
			
			
		
}		
 6b2:	0f 90       	pop	r0
 6b4:	0f 90       	pop	r0
 6b6:	0f 90       	pop	r0
 6b8:	0f 90       	pop	r0
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	ff 91       	pop	r31
 6c0:	ef 91       	pop	r30
 6c2:	bf 91       	pop	r27
 6c4:	af 91       	pop	r26
 6c6:	9f 91       	pop	r25
 6c8:	8f 91       	pop	r24
 6ca:	7f 91       	pop	r23
 6cc:	6f 91       	pop	r22
 6ce:	5f 91       	pop	r21
 6d0:	4f 91       	pop	r20
 6d2:	3f 91       	pop	r19
 6d4:	2f 91       	pop	r18
 6d6:	1f 91       	pop	r17
 6d8:	0f 91       	pop	r16
 6da:	0f 90       	pop	r0
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	0f 90       	pop	r0
 6e0:	1f 90       	pop	r1
 6e2:	18 95       	reti

000006e4 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 6e4:	87 b1       	in	r24, 0x07	; 7
 6e6:	8f 7c       	andi	r24, 0xCF	; 207
 6e8:	87 b9       	out	0x07, r24	; 7
 6ea:	88 b1       	in	r24, 0x08	; 8
 6ec:	80 63       	ori	r24, 0x30	; 48
 6ee:	88 b9       	out	0x08, r24	; 8
 6f0:	e9 eb       	ldi	r30, 0xB9	; 185
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	80 81       	ld	r24, Z
 6f6:	8c 7f       	andi	r24, 0xFC	; 252
 6f8:	80 83       	st	Z, r24
 6fa:	88 e9       	ldi	r24, 0x98	; 152
 6fc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 700:	08 95       	ret

00000702 <twi_start>:
 702:	94 ea       	ldi	r25, 0xA4	; 164
 704:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 708:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 70c:	99 23       	and	r25, r25
 70e:	e4 f7       	brge	.-8      	; 0x708 <twi_start+0x6>
 710:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 714:	84 e8       	ldi	r24, 0x84	; 132
 716:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 71a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 71e:	88 23       	and	r24, r24
 720:	e4 f7       	brge	.-8      	; 0x71a <twi_start+0x18>
 722:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 726:	88 7f       	andi	r24, 0xF8	; 248
 728:	88 31       	cpi	r24, 0x18	; 24
 72a:	21 f0       	breq	.+8      	; 0x734 <twi_start+0x32>
 72c:	80 34       	cpi	r24, 0x40	; 64
 72e:	21 f4       	brne	.+8      	; 0x738 <twi_start+0x36>
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	08 95       	ret
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	08 95       	ret
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	08 95       	ret

0000073c <twi_write>:
 73c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 740:	84 e8       	ldi	r24, 0x84	; 132
 742:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 746:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 74a:	88 23       	and	r24, r24
 74c:	e4 f7       	brge	.-8      	; 0x746 <twi_write+0xa>
 74e:	08 95       	ret

00000750 <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 750:	84 e8       	ldi	r24, 0x84	; 132
 752:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 756:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 75a:	88 23       	and	r24, r24
 75c:	e4 f7       	brge	.-8      	; 0x756 <twi_read_nack+0x6>
    return (TWDR);
 75e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 762:	08 95       	ret

00000764 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 764:	84 e9       	ldi	r24, 0x94	; 148
 766:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 76a:	08 95       	ret

0000076c <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 76c:	1f 92       	push	r1
 76e:	0f 92       	push	r0
 770:	0f b6       	in	r0, 0x3f	; 63
 772:	0f 92       	push	r0
 774:	11 24       	eor	r1, r1
 776:	2f 93       	push	r18
 778:	8f 93       	push	r24
 77a:	9f 93       	push	r25
 77c:	ef 93       	push	r30
 77e:	ff 93       	push	r31
 780:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 784:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 788:	8c 71       	andi	r24, 0x1C	; 28
 78a:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <UART_RxHead>
 78e:	ef 5f       	subi	r30, 0xFF	; 255
 790:	ef 71       	andi	r30, 0x1F	; 31
 792:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <UART_RxTail>
 796:	e9 17       	cp	r30, r25
 798:	39 f0       	breq	.+14     	; 0x7a8 <__vector_18+0x3c>
 79a:	e0 93 4f 01 	sts	0x014F, r30	; 0x80014f <UART_RxHead>
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	ee 5a       	subi	r30, 0xAE	; 174
 7a2:	fe 4f       	sbci	r31, 0xFE	; 254
 7a4:	20 83       	st	Z, r18
 7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__vector_18+0x3e>
 7a8:	82 e0       	ldi	r24, 0x02	; 2
 7aa:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <UART_LastRxError>
 7ae:	89 2b       	or	r24, r25
 7b0:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <UART_LastRxError>
 7b4:	ff 91       	pop	r31
 7b6:	ef 91       	pop	r30
 7b8:	9f 91       	pop	r25
 7ba:	8f 91       	pop	r24
 7bc:	2f 91       	pop	r18
 7be:	0f 90       	pop	r0
 7c0:	0f be       	out	0x3f, r0	; 63
 7c2:	0f 90       	pop	r0
 7c4:	1f 90       	pop	r1
 7c6:	18 95       	reti

000007c8 <__vector_19>:
 7c8:	1f 92       	push	r1
 7ca:	0f 92       	push	r0
 7cc:	0f b6       	in	r0, 0x3f	; 63
 7ce:	0f 92       	push	r0
 7d0:	11 24       	eor	r1, r1
 7d2:	8f 93       	push	r24
 7d4:	9f 93       	push	r25
 7d6:	ef 93       	push	r30
 7d8:	ff 93       	push	r31
 7da:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <UART_TxHead>
 7de:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <UART_TxTail>
 7e2:	98 17       	cp	r25, r24
 7e4:	69 f0       	breq	.+26     	; 0x800 <__DATA_REGION_LENGTH__>
 7e6:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <UART_TxTail>
 7ea:	ef 5f       	subi	r30, 0xFF	; 255
 7ec:	ef 71       	andi	r30, 0x1F	; 31
 7ee:	e0 93 50 01 	sts	0x0150, r30	; 0x800150 <UART_TxTail>
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	ee 58       	subi	r30, 0x8E	; 142
 7f6:	fe 4f       	sbci	r31, 0xFE	; 254
 7f8:	80 81       	ld	r24, Z
 7fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 7fe:	05 c0       	rjmp	.+10     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 800:	e1 ec       	ldi	r30, 0xC1	; 193
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	80 81       	ld	r24, Z
 806:	8f 7d       	andi	r24, 0xDF	; 223
 808:	80 83       	st	Z, r24
 80a:	ff 91       	pop	r31
 80c:	ef 91       	pop	r30
 80e:	9f 91       	pop	r25
 810:	8f 91       	pop	r24
 812:	0f 90       	pop	r0
 814:	0f be       	out	0x3f, r0	; 63
 816:	0f 90       	pop	r0
 818:	1f 90       	pop	r1
 81a:	18 95       	reti

0000081c <uart_init>:
 81c:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <UART_TxHead>
 820:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <UART_TxTail>
 824:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <UART_RxHead>
 828:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <UART_RxTail>
 82c:	28 2f       	mov	r18, r24
 82e:	39 2f       	mov	r19, r25
 830:	33 23       	and	r19, r19
 832:	1c f4       	brge	.+6      	; 0x83a <uart_init+0x1e>
 834:	22 e0       	ldi	r18, 0x02	; 2
 836:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 83a:	90 78       	andi	r25, 0x80	; 128
 83c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 840:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 844:	88 e9       	ldi	r24, 0x98	; 152
 846:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 84a:	86 e0       	ldi	r24, 0x06	; 6
 84c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 850:	08 95       	ret

00000852 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 852:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <UART_TxHead>
 856:	2f 5f       	subi	r18, 0xFF	; 255
 858:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 85a:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <UART_TxTail>
 85e:	29 17       	cp	r18, r25
 860:	e1 f3       	breq	.-8      	; 0x85a <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 862:	e2 2f       	mov	r30, r18
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	ee 58       	subi	r30, 0x8E	; 142
 868:	fe 4f       	sbci	r31, 0xFE	; 254
 86a:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 86c:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 870:	e1 ec       	ldi	r30, 0xC1	; 193
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	80 81       	ld	r24, Z
 876:	80 62       	ori	r24, 0x20	; 32
 878:	80 83       	st	Z, r24
 87a:	08 95       	ret

0000087c <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 87c:	cf 93       	push	r28
 87e:	df 93       	push	r29
 880:	ec 01       	movw	r28, r24
    while (*s)
 882:	03 c0       	rjmp	.+6      	; 0x88a <uart_puts+0xe>
        uart_putc(*s++);
 884:	21 96       	adiw	r28, 0x01	; 1
 886:	0e 94 29 04 	call	0x852	; 0x852 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 88a:	88 81       	ld	r24, Y
 88c:	81 11       	cpse	r24, r1
 88e:	fa cf       	rjmp	.-12     	; 0x884 <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 890:	df 91       	pop	r29
 892:	cf 91       	pop	r28
 894:	08 95       	ret

00000896 <__tablejump2__>:
 896:	ee 0f       	add	r30, r30
 898:	ff 1f       	adc	r31, r31
 89a:	05 90       	lpm	r0, Z+
 89c:	f4 91       	lpm	r31, Z
 89e:	e0 2d       	mov	r30, r0
 8a0:	09 94       	ijmp

000008a2 <__umulhisi3>:
 8a2:	a2 9f       	mul	r26, r18
 8a4:	b0 01       	movw	r22, r0
 8a6:	b3 9f       	mul	r27, r19
 8a8:	c0 01       	movw	r24, r0
 8aa:	a3 9f       	mul	r26, r19
 8ac:	70 0d       	add	r23, r0
 8ae:	81 1d       	adc	r24, r1
 8b0:	11 24       	eor	r1, r1
 8b2:	91 1d       	adc	r25, r1
 8b4:	b2 9f       	mul	r27, r18
 8b6:	70 0d       	add	r23, r0
 8b8:	81 1d       	adc	r24, r1
 8ba:	11 24       	eor	r1, r1
 8bc:	91 1d       	adc	r25, r1
 8be:	08 95       	ret

000008c0 <__itoa_ncheck>:
 8c0:	bb 27       	eor	r27, r27
 8c2:	4a 30       	cpi	r20, 0x0A	; 10
 8c4:	31 f4       	brne	.+12     	; 0x8d2 <__itoa_ncheck+0x12>
 8c6:	99 23       	and	r25, r25
 8c8:	22 f4       	brpl	.+8      	; 0x8d2 <__itoa_ncheck+0x12>
 8ca:	bd e2       	ldi	r27, 0x2D	; 45
 8cc:	90 95       	com	r25
 8ce:	81 95       	neg	r24
 8d0:	9f 4f       	sbci	r25, 0xFF	; 255
 8d2:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__utoa_common>

000008d6 <__utoa_ncheck>:
 8d6:	bb 27       	eor	r27, r27

000008d8 <__utoa_common>:
 8d8:	fb 01       	movw	r30, r22
 8da:	55 27       	eor	r21, r21
 8dc:	aa 27       	eor	r26, r26
 8de:	88 0f       	add	r24, r24
 8e0:	99 1f       	adc	r25, r25
 8e2:	aa 1f       	adc	r26, r26
 8e4:	a4 17       	cp	r26, r20
 8e6:	10 f0       	brcs	.+4      	; 0x8ec <__utoa_common+0x14>
 8e8:	a4 1b       	sub	r26, r20
 8ea:	83 95       	inc	r24
 8ec:	50 51       	subi	r21, 0x10	; 16
 8ee:	b9 f7       	brne	.-18     	; 0x8de <__utoa_common+0x6>
 8f0:	a0 5d       	subi	r26, 0xD0	; 208
 8f2:	aa 33       	cpi	r26, 0x3A	; 58
 8f4:	08 f0       	brcs	.+2      	; 0x8f8 <__utoa_common+0x20>
 8f6:	a9 5d       	subi	r26, 0xD9	; 217
 8f8:	a1 93       	st	Z+, r26
 8fa:	00 97       	sbiw	r24, 0x00	; 0
 8fc:	79 f7       	brne	.-34     	; 0x8dc <__utoa_common+0x4>
 8fe:	b1 11       	cpse	r27, r1
 900:	b1 93       	st	Z+, r27
 902:	11 92       	st	Z+, r1
 904:	cb 01       	movw	r24, r22
 906:	0c 94 85 04 	jmp	0x90a	; 0x90a <strrev>

0000090a <strrev>:
 90a:	dc 01       	movw	r26, r24
 90c:	fc 01       	movw	r30, r24
 90e:	67 2f       	mov	r22, r23
 910:	71 91       	ld	r23, Z+
 912:	77 23       	and	r23, r23
 914:	e1 f7       	brne	.-8      	; 0x90e <strrev+0x4>
 916:	32 97       	sbiw	r30, 0x02	; 2
 918:	04 c0       	rjmp	.+8      	; 0x922 <strrev+0x18>
 91a:	7c 91       	ld	r23, X
 91c:	6d 93       	st	X+, r22
 91e:	70 83       	st	Z, r23
 920:	62 91       	ld	r22, -Z
 922:	ae 17       	cp	r26, r30
 924:	bf 07       	cpc	r27, r31
 926:	c8 f3       	brcs	.-14     	; 0x91a <strrev+0x10>
 928:	08 95       	ret

0000092a <_exit>:
 92a:	f8 94       	cli

0000092c <__stop_program>:
 92c:	ff cf       	rjmp	.-2      	; 0x92c <__stop_program>
